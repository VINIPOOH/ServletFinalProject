package dal.dao.conection.impl;

import dal.dao.conection.ConnectionForTransactions;
import dal.dao.conection.ConnectionWithRestrictedAbilities;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class ConnectionTransactionalProxy implements ConnectionForTransactions {

    private final Connection connection;

    public void setReadyToClose(boolean readyToClose) {
        isReadyToClose = readyToClose;
    }

    private boolean isReadyToClose= false;

    public ConnectionTransactionalProxy(Connection connection) throws SQLException {
        connection.setAutoCommit(false);
        this.connection=connection;
    }

    @Override
    public void rollBack() throws SQLException {
        connection.rollback();
    }

    @Override
    public void commit() throws SQLException {
        connection.commit();
    }

    @Override
    public void close() throws SQLException {
        if(isReadyToClose){
            connection.close();
        }
    }

    @Override
    public Connection getSubject() {
        return connection;
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return connection.prepareStatement(sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return connection.prepareStatement(sql,autoGeneratedKeys);
    }

    @Override
    protected void finalize() throws Throwable {
        if (!connection.isClosed()) {
            connection.rollback();
            connection.close();
        }
    }
}
